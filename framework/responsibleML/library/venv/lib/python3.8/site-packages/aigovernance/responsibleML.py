import math

__modeltype__ = ""
__emissions__ = 0.0
__bias__ = 0.0
__explained__ = False
__epsilon__ = 0.0

def set_explainability(explained: bool):
    __explained__ = explained
    
def set_emissions(emissions: float):
    __emissions__ = emissions

def set_bias(bias: float):
    __bias__ = bias

def set_epsilon(epsilon: bool):
    __epsilon__ = epsilon

def __init__(modeltype:str,
             explained: bool,
             emissions: float,
             bias: float,
             epsilon: bool):
    
    __modeltype__ = modeltype
    __emissions__ = emissions
    __bias__ = bias
    __explained__ = explained
    __epsilon__ = epsilon
    
def __calculate_emissions_index():
    if __emissions__ <= 500:
        emissionIndex = 3
    elif __emissions__ > 500 and __emissions__ <= 10000:
        emissionIndex = 2
    else:
        emissionIndex = 1
    
    return emissionIndex

def __calculate_privacy_index():
    if __epsilon__ <= 1:
        privacyIndex = 3
    elif __epsilon__ > 1 and __epsilon__ <= 10:
        privacyIndex = 2
    else:
        privacyIndex = 1
    
    return privacyIndex
    
def __calculate_explainability_index():
    
    expIndex = 1
    
    if __modeltype__ == "deeplearning":
        return expIndex
    
    if __explained__ == True:
        expIndex = 3
    else:
        expIndex = 2
    
    return expIndex
    
def __calculate_bias_index():
    if __bias__ <= 0.25 and __bias__ >= -0.25:
        bindex = 3
    elif __bias__ > 0.5 or __bias__ < -0.5:
        bindex = 1
    else:
        bindex = 2
    
    return bindex
    
def rai_index():
    
    index = 0.0
    weights = 0.2
    
    emission_index = __calculate_emissions_index()
    privacy_index = __calculate_privacy_index()
    bias_index = __calculate_bias_index()
    explain_index = __calculate_explainability_index()
    
    index = weights * (emission_index + privacy_index + bias_index + explain_index)
    
    return index